// Code generated by go-assign; DO NOT EDIT.

package {{ .Package }}

import (
{{- if .Extend.HasBase64Encoding }}
	"encoding/base64"
{{- end }}
	"encoding/json"
	"os"
)

type {{ .Extend.Name }} struct     {
	{{ .Extend.Parent }}
{{- range $field := .Extend.Fields }}
	{{ $field.Name }} string {{ if ne $field.Tag "" }}`{{ $field.Tag }}`{{ end }}
{{- end }}
}

func (g *{{ .Extend.Name }}) UnmarshalJSON(data []byte) error {
	type Alias {{ .Extend.Name }}
	s := struct {
		*Alias
{{- range $field := .Extend.Fields }}
		{{ $field.Name }} string {{ if ne $field.Tag "" }}`{{ $field.Tag }}`{{ end }}
{{- end }}
	}{
		Alias: (*Alias)(g),
	}

	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("go-assign: %w", err)
	}

{{- range $field := .Extend.Fields }}
	// Assign "{{ $field.Name }}" and "{{ $field.AssignTargetName }}"
	g.{{ $field.Name }} = s.{{ $field.Name }}
	{{ $field.LocalName }}Data, err := os.ReadFile(s.{{ $field.Name }})
	if err != nil {
		return fmt.Errorf("go-assign({{ $field.Name }}): %w", err)
	}
{{- if $field.Base64 }}
	g.{{ $field.AssignTargetName }} = make([]byte, base64.StdEncoding.EncodedLen(len({{ $field.LocalName }}Data)))
	if _, err := base64.StdEncoding.Decode(g.{{ $field.AssignTargetName }}, {{ $field.LocalName }}Data); err != nil {
		return fmt.Errorf("go-assign({{ $field.Name }}): %w", err)
	}
{{- else }}
	g.{{ $field.AssignTargetName }} = {{ $field.LocalName }}Data
{{ end }}

{{- end }}

	return nil
}
